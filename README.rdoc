= Introduction

Here's a fork of ablagoev's plugin[https://github.com/ablagoev/fluent-plugin-out-http-buffered] to meet our project specified needs.

= fluent-out-http-buffered

This is an output plugin for Fluentd[http://fluentd.org/] which deliveres buffered log messages to an http endpoint.

It has configurable read[http://ruby-doc.org/stdlib-2.0/libdoc/net/http/rdoc/Net/HTTP.html#method-i-read_timeout-3D] and open[http://ruby-doc.org/stdlib-2.0/libdoc/net/http/rdoc/Net/HTTP.html#open_timeout] timeouts.

Clients can also configure which http response statuses should be retried (in most cases clients would want to retry on status 500).

Maximum number of records in a HTTP request can be configured. A chunk will be sent by multiple threads.

Additional headers can be configured with "additional_headers" property.

The plugin was influenced by following projects:
standard http_output_plugin[https://github.com/ento/fluent-plugin-out-http]
http-out-ext[https://github.com/kawasakitoshiya/fluent-plugin-out-http-ext]
ogibayashi's_fork[https://github.com/ogibayashi/fluent-plugin-out-http-buffered]
niku4i's_fork[https://github.com/niku4i/fluent-plugin-out-http-buffered]


== Installation:

`gem install fluent-out-http-buffered`

== Usage:

    # Configuration file fluent.conf
    <match fluentd.test.*>
      type http_buffered
      flush_interval 2s
      #Endpoint for messages
      endpoint_url    http://localhost.local/api/<data.id> # <data.id> refres to data.id in the record like {"data"=> {"id"=> 1, "name"=> "foo"}}
      #HTTP method (default: post)
      http_method put
      #Max number of events per HTTP request
      http_event_limit 100
      #Comma separated list of http statuses which need to be retried
      http_retry_statuses 500, 403
      #Read timeout in seconds, supports floats
      http_read_timeout 2.2
      #Open timeout in seconds, supports floats
      http_open_timeout 2.34
      buffer_chunk_limit 1m
      buffer_path /tmp/buffer
      # Additional header (default: nil). It might be useful to use this with out_forest to include tag/hostname as header.
      additional_headers X-custom-header1=foo,X-custom-header2=bar
    </match>

== Todo

* TODO: Update the test cases for added features

== Copyright

Copyright (c) 2013 ablagoev. See LICENSE.txt for
further details.
